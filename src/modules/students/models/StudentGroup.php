<?php

namespace app\modules\students\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%student_group}}".
 *
 * @property integer $id
 * @property string $date
 * @property integer $type
 * @property integer $group_id
 * @property integer $student_id
 * @property string $comment
 * @property integer $funding_id
 *
 * @property Student $student
 * @property Group $group
 */
class StudentGroup extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%student_group}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['date'], 'safe'],
            [['type', 'group_id', 'student_id', 'funding_id'], 'integer'],
            [['comment'], 'string', 'max' => 128],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'date' => Yii::t('app', 'Date'),
            'type' => Yii::t('app', 'Type'),
            'group_id' => Yii::t('app', 'Group ID'),
            'student_id' => Yii::t('app', 'Student ID'),
            'comment' => Yii::t('app', 'Comment'),
            'funding_id' => Yii::t('app', 'Funding ID'),
        ];
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            $this->date = date('Y-m-d', strtotime($this->date));
            return true;
        } else {
            return false;
        }
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->date = date('d.m.Y', strtotime($this->date));

    }

    public static function getTypesList()
    {
        return [0 => Yii::t('app', 'include'), 1 => Yii::t('app', 'exclude')];
    }

    public function getType()
    {
        return $this->type ? Yii::t('app', 'exclude') : Yii::t('app', 'include');
    }

    public function getStudent()
    {
        return $this->hasOne(Student::className(), ['id' => 'student_id']);
    }

    public function getGroup()
    {
        return $this->hasOne(Group::className(),['id' => 'group_id']);
    }

    public static function getStudentsArrayFromInclude($id)
    {
        return Group::findOne(['id' => $id])->getNotStudentsArray();
    }

    public static function getStudentsArrayFromExclude($id)
    {
        return Group::findOne(['id' => $id])->getStudentsArray();
    }

    public static function getStudentsListFromInclude($id)
    {
        $objs = self::getStudentsArrayFromInclude($id);
        $arr = [];
        foreach ($objs as $obj) {
            $arr[] = ['id' => $obj->id, 'name' => $obj->getFullNameAndCode()];
        }
        return $arr;
    }

    public static function getStudentsListFromExclude($id)
    {
        $objs = self::getStudentsArrayFromExclude($id);
        $arr = [];
        foreach ($objs as $obj) {
            $arr[] = ['id' => $obj->id, 'name' => $obj->getFullNameAndCode()];
        }
        return $arr;
    }
}
